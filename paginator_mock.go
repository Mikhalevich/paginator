// Code generated by MockGen. DO NOT EDIT.
// Source: paginator.go
//
// Generated by this command:
//
//	mockgen -source=paginator.go -destination=paginator_mock.go -package=paginator
//

// Package paginator is a generated GoMock package.
package paginator

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQueryer is a mock of Queryer interface.
type MockQueryer[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockQueryerMockRecorder[T]
	isgomock struct{}
}

// MockQueryerMockRecorder is the mock recorder for MockQueryer.
type MockQueryerMockRecorder[T any] struct {
	mock *MockQueryer[T]
}

// NewMockQueryer creates a new mock instance.
func NewMockQueryer[T any](ctrl *gomock.Controller) *MockQueryer[T] {
	mock := &MockQueryer[T]{ctrl: ctrl}
	mock.recorder = &MockQueryerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryer[T]) EXPECT() *MockQueryerMockRecorder[T] {
	return m.recorder
}

// Count mocks base method.
func (m *MockQueryer[T]) Count(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockQueryerMockRecorder[T]) Count(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockQueryer[T])(nil).Count), ctx)
}

// Query mocks base method.
func (m *MockQueryer[T]) Query(ctx context.Context, offset, limit int) ([]T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, offset, limit)
	ret0, _ := ret[0].([]T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockQueryerMockRecorder[T]) Query(ctx, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockQueryer[T])(nil).Query), ctx, offset, limit)
}
